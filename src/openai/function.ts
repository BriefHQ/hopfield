import {
  BaseHopfieldFunction,
  type DisabledTypes,
  type HopfieldFunctionOptions,
  type TypeTemplates,
} from '../function.js';
import type { SentenceOrError } from '../types.js';

import {
  ZodFirstPartyTypeKind,
  type ZodFunction,
  type ZodTuple,
  type ZodTypeAny,
  z,
} from 'zod';

const disallowedTypes = [
  ZodFirstPartyTypeKind.ZodAny,
  ZodFirstPartyTypeKind.ZodBigInt,
  ZodFirstPartyTypeKind.ZodTuple,
] as const satisfies readonly ZodFirstPartyTypeKind[];

const openAITypeTemplates = {
  ZodEnum: (description: string) =>
    `${description} This must always be a possible value from the \`enum\` array.` as const,
} as const satisfies TypeTemplates;

const openAITemplates = {
  enum: <D extends string>(description: SentenceOrError<D>) =>
    openAITypeTemplates.ZodEnum(description),
} as const;

const stringToJSONSchema = z.string().transform((str, ctx): object => {
  try {
    return JSON.parse(str);
  } catch (_e) {
    ctx.addIssue({ code: 'custom', message: 'Invalid JSON' });
    return z.NEVER;
  }
});

export type OpenAIHopfieldFunctionProps<
  Args extends ZodTuple<any, any>,
  Returns extends ZodTypeAny,
  ZFunction extends ZodFunction<Args, Returns>,
  FName extends string,
  D extends DisabledTypes,
  T extends TypeTemplates,
> = {
  schema: ZFunction;
  name: FName;
  options?: HopfieldFunctionOptions<D, T>;
};

/**
 * Takes a Zod schema for a function and formats it into
 *
 */
export class OpenAIHopfieldFunction<
  ZFunctionArgs extends ZodTuple<any, any>,
  ZFunctionReturns extends ZodTypeAny,
  ZFunction extends ZodFunction<ZFunctionArgs, ZFunctionReturns>,
  FName extends string,
  DTypes extends DisabledTypes = typeof disallowedTypes,
  TTemplates extends TypeTemplates = typeof openAITypeTemplates,
> extends BaseHopfieldFunction<
  ZFunctionArgs,
  ZFunctionReturns,
  ZFunction,
  FName,
  DTypes,
  TTemplates
> {
  constructor({
    schema,
    name,
    options,
  }: OpenAIHopfieldFunctionProps<
    ZFunctionArgs,
    ZFunctionReturns,
    ZFunction,
    FName,
    DTypes,
    TTemplates
  >) {
    super({
      schema,
      name,
      options,
    });
  }

  protected _defaultTypeTemplates() {
    return openAITypeTemplates;
  }

  protected _defaultDisabledTypes() {
    return disallowedTypes;
  }

  get output() {
    return z.object({
      name: z.enum([this.name]).describe('The name of the function to call.'),
      arguments: stringToJSONSchema
        .describe(
          'The arguments to call the function with, as generated by the model in JSON format and coerced into the provided schema. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema.',
        )
        .transform((obj) => {
          const result = this.parameters.safeParse(obj);
          if (!result.success) {
            throw result.error;
          }
          return result.data;
        }),
    });
  }

  static templates = openAITemplates;

  /**
   *
   */
  static create<
    ZFunctionArgs extends ZodTuple<any, any>,
    ZFunctionReturns extends ZodTypeAny,
    ZFunction extends ZodFunction<ZFunctionArgs, ZFunctionReturns>,
    FName extends string,
    D extends DisabledTypes = typeof disallowedTypes,
    T extends TypeTemplates = typeof openAITypeTemplates,
  >(
    opts: OpenAIHopfieldFunctionProps<
      ZFunctionArgs,
      ZFunctionReturns,
      ZFunction,
      FName,
      D,
      T
    >,
  ) {
    return new OpenAIHopfieldFunction(opts);
  }
}

/**
 * Enum for finish reasons
 * @enum {string}
 *
 * Enum Members:
 * - `stop`: API returned complete message, or a message terminated by one of the stop sequences provided via the stop parameter
 * - `length`: Incomplete model output due to max_tokens parameter or token limit
 * - `function_call`: The model decided to call a function
 * - `content_filter`: Omitted content due to a flag from our content filters
 * - null: API response still in progress or incomplete
 */
// const FinishReasonEnum = z
//   .enum(['stop', 'length', 'function_call', 'content_filter'])
//   .nullable();

// const MessageRoleEnum = z.enum(['system', 'user', 'assistant', 'function']);

// const MessageSchema = z.object({
//   role: MessageRoleEnum,
//   content: z.string().nullable(),
//   function_call: FunctionCallSchema.optional(),
// });

// const ChoiceSchema = z.object({
//   index: z.number().int().nonnegative(),
//   message: MessageSchema,
//   finish_reason: FinishReasonEnum,
// });

// const UsageSchema = z.object({
//   prompt_tokens: z.number(),
//   completion_tokens: z.number(),
//   total_tokens: z.number(),
// });

// return z.object({
//   id: z.string(),
//   object: z.string(),
//   created: z.number(),
//   model: z.string(),
//   choices: z.array(ChoiceSchema),
//   usage: UsageSchema,
// });
