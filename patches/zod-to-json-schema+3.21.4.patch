diff --git a/node_modules/zod-to-json-schema/src/Options.d.ts b/node_modules/zod-to-json-schema/src/Options.d.ts
index abfb7a2..ca546fc 100644
--- a/node_modules/zod-to-json-schema/src/Options.d.ts
+++ b/node_modules/zod-to-json-schema/src/Options.d.ts
@@ -1,4 +1,6 @@
-import { ZodSchema } from "zod";
+import { ZodSchema, type ZodTypeDef } from "zod";
+import type { Refs } from "./Refs";
+import type { JsonSchema7Type } from "./parseDef";
 export type Targets = "jsonSchema7" | "jsonSchema2019-09" | "openApi3";
 export type Options<Target extends Targets = "jsonSchema7"> = {
     name: string | undefined;
@@ -14,6 +16,7 @@ export type Options<Target extends Targets = "jsonSchema7"> = {
     errorMessages: boolean;
     markdownDescription: boolean;
     emailStrategy: "format:email" | "format:idn-email" | "pattern:zod";
+    onParseDef: ((def: ZodTypeDef, refs: Refs, schema: JsonSchema7Type) => void) | undefined;
 };
 export declare const defaultOptions: Options;
 export declare const getDefaultOptions: <Target extends Targets>(options: string | Partial<Options<Target>> | undefined) => Options<Target>;
diff --git a/node_modules/zod-to-json-schema/src/Options.js b/node_modules/zod-to-json-schema/src/Options.js
index 8b680c4..ed84e25 100644
--- a/node_modules/zod-to-json-schema/src/Options.js
+++ b/node_modules/zod-to-json-schema/src/Options.js
@@ -15,6 +15,7 @@ exports.defaultOptions = {
     errorMessages: false,
     markdownDescription: false,
     emailStrategy: "format:email",
+    onParseDef: undefined,
 };
 const getDefaultOptions = (options) => (typeof options === "string"
     ? Object.assign(Object.assign({}, exports.defaultOptions), { name: options }) : Object.assign(Object.assign({}, exports.defaultOptions), options));
diff --git a/node_modules/zod-to-json-schema/src/parseDef.js b/node_modules/zod-to-json-schema/src/parseDef.js
index 4f33785..26748a8 100644
--- a/node_modules/zod-to-json-schema/src/parseDef.js
+++ b/node_modules/zod-to-json-schema/src/parseDef.js
@@ -45,6 +45,7 @@ function parseDef(def, refs, forceResolution = false // Forces a new schema to b
     const jsonSchema = selectParser(def, def.typeName, refs);
     if (jsonSchema) {
         addMeta(def, refs, jsonSchema);
+        if (refs.onParseDef) refs.onParseDef(def, refs, jsonSchema);
     }
     newItem.jsonSchema = jsonSchema;
     return jsonSchema;
